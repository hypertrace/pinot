{{- if .Values.server.enabled }}
{{- range $name,$tierConfig := omit .Values.server.tiers "default" }}
{{- $tier := mergeOverwrite (deepCopy (omit $.Values.server "tiers")) (deepCopy $.Values.server.tiers.default) (deepCopy $tierConfig) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- if eq $name "tier1" }}
  name: {{ include "pinot.server.fullname" $ }}
  {{- else }}
  name: {{ include "pinot.server.fullname" $ }}-{{ $name }}
  {{- end }}
  labels:
    app: {{ include "pinot.name" $ }}
    chart: {{ include "pinot.chart" $ }}
    {{- if eq $name "tier1" }}
    component: {{ $.Values.server.name }}
    {{- else }}
    component: {{ $.Values.server.name }}-{{ $name }}
    {{- end }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ include "pinot.name" $ }}
      release: {{ $.Release.Name }}
      {{- if eq $name "tier1" }}
      component: {{ $.Values.server.name }}
      {{- else }}
      component: {{ $.Values.server.name }}-{{ $name }}
      {{- end }}
  {{- if eq $name "tier1" }}
  serviceName: {{ include "pinot.server.fullname" $ }}
  {{- else }}
  serviceName: {{ include "pinot.server.fullname" $ }}-{{ $name }}
  {{- end }}
  replicas: {{ $tier.replicaCount }}
  updateStrategy:
    type: {{ $tier.updateStrategy.type }}
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: {{ include "pinot.name" $ }}
        release: {{ $.Release.Name }}
        {{- if eq $name "tier1" }}
        component: {{ $.Values.server.name }}
        {{- else }}
        component: {{ $.Values.server.name }}-{{ $name }}
        {{- end }}
      {{- with $tier.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      annotations: {{ toYaml $tier.podAnnotations | nindent 8 }}
    spec:
      containers:
        - name: pinot-server
          image: {{ include "pinot.image" $ }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          args: [
            "StartServer",
            "-clusterName", "{{ $.Values.cluster.name }}",
            "-zkAddress", {{ include "zookeeper.path" $ | quote }},
            "-configFileName", "/var/pinot/server/config/pinot-server.conf"
          ]
          env:
            - name: JAVA_OPTS
              value: "{{ $tier.jvmOpts }} -Dlog4j2.configurationFile={{ $tier.log4j2ConfFile }} -Dplugins.dir={{ $tier.pluginsDir }}  {{ if $tier.jmx.enabled }}{{ $tier.jmx.opts }}{{ end }}"
          ports:
            - name: request
              containerPort: {{ $tier.ports.netty }}
              protocol: TCP
            - name: admin
              containerPort: {{ $tier.ports.admin }}
              protocol: TCP
            {{- if $tier.jmx.enabled }}
            - name: jmx
              containerPort: {{ $tier.jmx.port }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /var/pinot/server/config
            - name: pinot-server-storage
              mountPath: "{{ $tier.persistence.mountPath }}"
            - name: log-config
              mountPath: /opt/pinot/conf/pinot-server-log4j2.xml
              subPath: "pinot-server-log4j2.xml"
            {{- if eq $.Values.cluster.storage.scheme "gs" }}
            - name: gcs-iam-secret
              mountPath: "/account"
            {{- end }}
          livenessProbe:
            tcpSocket:
              port: {{ $tier.ports.netty }}
            initialDelaySeconds: {{ $tier.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $tier.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $tier.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ $tier.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ $tier.ports.admin }}
            initialDelaySeconds: {{ $tier.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $tier.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $tier.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ $tier.readinessProbe.failureThreshold }}
          resources: {{ toYaml $tier.resources | nindent 12 }}
        {{- if $tier.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ $tier.prometheus.jmx.image.repository }}:{{ $tier.prometheus.jmx.image.tag }}"
          imagePullPolicy: "{{ $tier.prometheus.jmx.image.pullPolicy }}"
          command:
            - java
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_httpserver.jar
            - {{ $tier.prometheus.jmx.port | quote }}
            - /etc/jmx-config/prometheus-pinot-server.yml
          ports:
            - name: prometheus-jmx
              containerPort: {{ $tier.prometheus.jmx.port }}
          resources:
            {{- toYaml $tier.prometheus.jmx.resources | nindent 12 }}
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-config
        {{- end }}
      restartPolicy: Always
      serviceAccountName: {{ include "pinot.server.serviceAccountName" $ }}
      terminationGracePeriodSeconds: {{ $tier.terminationGracePeriodSeconds }}
      volumes:
        - name: config
          configMap:
            {{- if eq $name "tier1" }}
            name: {{ include "pinot.server.fullname" $ }}-config
            {{- else }}
            name: {{ include "pinot.server.fullname" $ }}-{{ $name }}-config
            {{- end }}
        - name: jmx-config
          configMap:
            name: {{ include "pinot.server.fullname" $ }}-jmx-config
        - name: log-config
          configMap:
            name: {{ include "pinot.server.fullname" $ }}-log-config
        {{- if not $tier.persistence.enabled }}
        - name: pinot-server-storage
          emptyDir: {}
        {{- end }}
        {{- if eq $.Values.cluster.storage.scheme "gs" }}
        - name: gcs-iam-secret
          secret:
            secretName: {{ $.Values.cluster.storage.gs.secretName }}
        {{- end }}
      {{- if $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- with $tier.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $tier.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $tier.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $tier.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if $tier.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pinot-server-storage
      spec:
        accessModes:
          - {{ $tier.persistence.accessMode | quote }}
        {{- if $tier.persistence.storageClass }}
        {{- if (eq "-" $tier.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ $tier.persistence.storageClass }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ $tier.persistence.size }}
  {{- end }}
{{- end }}
{{- end }}
