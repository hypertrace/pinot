{{- if .Values.controller.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pinot.controller.fullname" . }}
  labels:
    app: {{ include "pinot.name" . }}
    chart: {{ include "pinot.chart" . }}
    component: {{ .Values.controller.name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ include "pinot.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.controller.name }}
  serviceName: {{ include "pinot.controller.fullname" . }}
  replicas: {{ .Values.controller.replicaCount }}
  updateStrategy:
    type: {{ .Values.controller.updateStrategy.type }}
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: {{ include "pinot.name" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.controller.name }}
      annotations:
        {{- toYaml .Values.controller.podAnnotations | nindent 8 }}
    spec:
      {{- if .Values.zookeeper.path }}
      initContainers:
        - name: create-zk-root-path
          image: "{{ .Values.zookeeper.image.repository }}:{{ .Values.zookeeper.image.tag }}"
          imagePullPolicy: {{ .Values.zookeeper.image.pullPolicy }}
          command: ["/bin/bash", "-cx"]
          args:
            - |
              # zookeper-shell used doesn't have proper mechanism to configure retries.
              # Retrying within helm as a workaround
              exitCode=1
              i=0
              while [ $i -le {{ .Values.zookeeper.retries }} ]; do
                bin/zookeeper-shell.sh ZooKeeper -server {{ include "zookeeper.url" . | quote }} create {{ .Values.zookeeper.path | quote }} ""
                if [ $? -eq 0 ]; then
                  exitCode=0
                  break
                fi
                sleep {{ .Values.zookeeper.retryInterval }}
                i=`expr $i + 1`
              done
              exit $exitCode
      {{- end }}
      containers:
        - name: pinot-controller
          image: {{ include "pinot.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: [ "StartController", "-configFileName", "/var/pinot/controller/config/pinot-controller.conf" ]
          env:
            - name: JAVA_OPTS
              value: "{{ .Values.controller.jvmOpts }} -Dlog4j2.configurationFile={{ .Values.controller.log4j2ConfFile }} -Dplugins.dir={{ .Values.controller.pluginsDir }} {{ if .Values.controller.jmx.enabled }}{{ .Values.controller.jmx.opts }}{{ end }}"
          ports:
            - name: rest
              containerPort: {{ .Values.controller.port }}
              protocol: TCP
            {{- if .Values.controller.jmx.enabled }}
            - name: jmx
              containerPort: {{ .Values.controller.jmx.port }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /var/pinot/controller/config
            - name: pinot-controller-storage
              mountPath: "{{ .Values.controller.persistence.mountPath }}"
            {{- if eq .Values.cluster.storage.scheme "gs" }}
            - name: gcs-iam-secret
              mountPath: "/account"
            {{- end }}
          livenessProbe:
            httpGet:
              path: /pinot-controller/admin
              port: {{ .Values.controller.port }}
            initialDelaySeconds: {{ .Values.controller.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controller.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controller.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.controller.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /pinot-controller/admin
              port: {{ .Values.controller.port }}
            initialDelaySeconds: {{ .Values.controller.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controller.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controller.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.controller.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.controller.resources | nindent 12 }}
        {{- if .Values.controller.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.controller.prometheus.jmx.image.repository }}:{{ .Values.controller.prometheus.jmx.image.tag }}"
          imagePullPolicy: "{{ .Values.controller.prometheus.jmx.image.pullPolicy }}"
          command:
            - java
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_httpserver.jar
            - {{ .Values.controller.prometheus.jmx.port | quote }}
            - /etc/jmx-config/prometheus-pinot-controller.yml
          ports:
            - name: prometheus-jmx
              containerPort: {{ .Values.controller.prometheus.jmx.port }}
          resources:
            {{- toYaml .Values.controller.prometheus.jmx.resources | nindent 12 }}
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-config
        {{- end }}
      restartPolicy: Always
      serviceAccountName: {{ include "pinot.controller.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.controller.terminationGracePeriodSeconds }}
      volumes:
        - name: config
          configMap:
            name: {{ include "pinot.controller.fullname" . }}-config
        - name: jmx-config
          configMap:
            name: {{ include "pinot.controller.fullname" . }}-jmx-config
        {{- if not .Values.controller.persistence.enabled }}
        - name: pinot-controller-storage
          emptyDir: {}
        {{- end }}
        {{- if eq .Values.cluster.storage.scheme "gs" }}
        - name: gcs-iam-secret
          secret:
            secretName: {{ .Values.cluster.storage.gs.secretName }}
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.controller.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pinot-controller-storage
      spec:
        accessModes:
          - {{ .Values.controller.persistence.accessMode | quote }}
        {{- if .Values.controller.persistence.storageClass }}
        {{- if (eq "-" .Values.controller.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.controller.persistence.storageClass }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.controller.persistence.size | quote}}
  {{- end }}
{{- end }}
